#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Section
Discusión
\end_layout

\begin_layout Standard
Luego de obtener los resultados presentados en la sección anterior, se pueden
 obsevar distintos aspectos tanto de los algoritmos como de los métodos.
 Los mismos serán discutidos a continuación.
\end_layout

\begin_layout Subsection
Consumo de memoria
\end_layout

\begin_layout Standard
En el primer gráfico expuesto se puede ver como el consumo de memoria del
 método 
\begin_inset Formula $LU$
\end_inset

 es ordenes de magnitud superior al del método de jacobi.
 También se puede ver que para matrices pequeñas el consumo resulta similar,
 pero al aumentar el tamaño de la matriz, la diferencia aumenta en forma
 notable, debido a que el orden de consumo de memoria del algoritmo 
\begin_inset Formula $LU$
\end_inset

 es cuadrático.
\end_layout

\begin_layout Standard
El orden del consumo de memoria del algoritmo de jacobi también es cuadrático
 en peor caso.
 Pero este caso es muy dificil de encontrar en el dominio del problema ya
 que las matrices son típicamente ralas.
 Entonces, el consumo esperado de memoria se acercaría a un consumo de orden
 lineal en el tamaño de la matriz.
\end_layout

\begin_layout Standard
En el tercer gráfico expuesto se puede analizar el comportamiento del algoritmo
 de Jacobis para matrices más grandes que las soportadas por el algoritmo
 de 
\begin_inset Formula $LU$
\end_inset

.
 Se ve como si bien crecen los requerimientos de memoria, este crecimiento
 es aceptable en función del tamaño de la matriz.
\end_layout

\begin_layout Subsection
Tiempo de ejecución
\end_layout

\begin_layout Standard
En el segundo gráfico expuesto se puede observar claramente que el tiempo
 de ejecución del método 
\begin_inset Formula $LU$
\end_inset

 es, también, ordenes de magnitud superior al del método de Jacobi.
 A diferencia del anterior, para matrices pequeñas, ya se nota una diferencia
 no despreciable en el tiempo de ejecución.
 Siendo aún mayor para tamaños considerables de matrices.
\end_layout

\begin_layout Standard
En el cuarto gráfico se puede ver como el algoritmo de Jacobi tiene una
 performance superior al la del algoritmo 
\begin_inset Formula $LU$
\end_inset

.
 Se puede ver que el crecimiento no es excesivo en función del tamaño de
 la matriz, permitiendo así trabajar con matrices más grandes que 
\begin_inset Formula $LU$
\end_inset

.
 En particular es interesante notar que el algoritmo de Jacobi tarda poco
 más de 2.5 segundos para procesar una matriz de 
\begin_inset Formula $300000x30000$
\end_inset

, mientras que el algoritmo 
\begin_inset Formula $LU$
\end_inset

 tarda un tiempo similar (apenas menos de 2.5 segundos) para una matriz de
 
\begin_inset Formula $450x450$
\end_inset

.
 Es decir, el algoritmo de Jacobis tarda un tiempo similar al algoritmo
 de 
\begin_inset Formula $LU$
\end_inset

 para procesar una matriz dos ordenes de magnitud mas grande.
\end_layout

\begin_layout Subsection
Criterios de parada
\end_layout

\begin_layout Standard
Dado que los diferentes criterios de parada no modifcan el comportamiento
 del algoritmo (ya que sólo determinan cuantas iteraciones se realizan)
 la elección de uno u otro sólo afectará la presición del resultado final
 que se logra.
 En el gráfico de criterios de parada se puede ver cómo usando la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
emph{Norma2}
\end_layout

\end_inset

 y la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
emph{NormaInfinito }
\end_layout

\end_inset

 se logra para una misma cota resultados con menor presición que usando
 la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
emph{Norma1}
\end_layout

\end_inset

, sin embargo se decidió que la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
emph{Norma2}
\end_layout

\end_inset

 es una buena norma para utilizar en el criterio de parada, ya que es una
 buena forma de calcular distancia entre dos vectores y no resulta una norma
 tan restrictiva como la 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
emph{Norma1}
\end_layout

\end_inset

.
 De todas maneras con cualquiera de las tres normas planteadas se vio que
 se llega a un buen resultado y que el algoritmo devuelve un resultado apropiado
 para presicion elegida.
\end_layout

\begin_layout Subsection
Correctitud
\end_layout

\begin_layout Standard
En el gráfico 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
emph{"Comparativa LU Jacobi"}
\end_layout

\end_inset

 se compara el resultado alcanzado al utilizar el algoritmo de Jacobi con
 el obtenido mediante el algoritmo LU.
 Se puede ver que en las primeras iteraciones el algoritmo de Jacobi se
 encuentra lejos del resultado calculado por LU, pero al avanzar en la cantidad
 de iteraciones el primero se acerca al valor del segundo.
 En conclusión se ve que, dada una cota suficientemente restrictiva, el
 algoritmo de Jacobi obtendrá el mismo resultado que el algoritmo de LU.
\end_layout

\begin_layout Standard
En los ultimo gráficos se presentan casos de prueba más simples y su resultado.
\end_layout

\begin_layout Standard
En el 
\emph on
Ejemplo1
\emph default
 se ve una disposición de páginas en una lista circular, como es de esperar
 al ser indistinguibles los nodos, el ranking de Page para todas resulta
 ser el mismo.
\end_layout

\begin_layout Standard
En el 
\emph on
Ejemplo2
\emph default
 se ve una disposición el la que todas las página apuntan a una misma página,
 en este caso la página con mayor probabilidad resulta ser esta última,
 ya que desde cualquier página sólo se puede ir a ésta.
\end_layout

\begin_layout Standard
En el 
\emph on
Ejemplo3
\emph default
 se presenta una distribución de árbol binario, en este caso se puede observar
 como a medida que se baja en un nivel del árbol la probabilidad aumenta
 con respecto al nivel anterior, también se ve como las página en un mismo
 nivel poseen la misma probabilidad.
 Esto se corresponde con la noción del ranking de page, ya que a una página
 dada, se puede llegar por medio de los ancestros de dicha página, por lo
 que la probabilidad depende directamente de esto.
\end_layout

\begin_layout Standard
En el 
\emph on
Ejemplo4
\emph default
 se ve por un lado una distribución de árbol en el que a medida que se disminuye
 en el nivel del árbol, la cantidad de hijos aumenta y por el otro un grafo
 
\begin_inset Formula $K_{3}$
\end_inset

.
 En los resultados obtenidos se ve que en los dos primeros niveles del árbol
 la probabilidad aumenta, mientras que en los los siguientes niveles (donde
 las páginas tienen más de dos hijos) la probabilidad disminuye.
 Esto se debe a que la probabilidad de pasar de un padre a un hijo disminuye
 a medida que aumenta la cantidad de hijos, por lo que la probabilidad de
 estar en un nodo con muchos hermanos es menor que la de estar en un nodo
 con menos hermanos.
 Por otro lado se puede ver que la mayor probabilidad se logra en la isla
 del grafo 
\begin_inset Formula $K_{3}$
\end_inset

.
 Ésto es debido a que una vez que se llega a esa isla, (dado que la probabilidad
 de continuar por los links es mayor a la probabilidad de saltar a una página
 cualquiera) es probable que se continúe en esa isla.
\end_layout

\end_body
\end_document
